// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ws_connect
SEXP ws_connect(std::string url);
RcppExport SEXP webrockets_ws_connect(SEXP urlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type url(urlSEXP);
    rcpp_result_gen = Rcpp::wrap(ws_connect(url));
    return rcpp_result_gen;
END_RCPP
}
// ws_receive_one
std::string ws_receive_one(SEXP ws_ptr, int frequency);
RcppExport SEXP webrockets_ws_receive_one(SEXP ws_ptrSEXP, SEXP frequencySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ws_ptr(ws_ptrSEXP);
    Rcpp::traits::input_parameter< int >::type frequency(frequencySEXP);
    rcpp_result_gen = Rcpp::wrap(ws_receive_one(ws_ptr, frequency));
    return rcpp_result_gen;
END_RCPP
}
// ws_receive_multiple
std::vector<std::string> ws_receive_multiple(SEXP ws_ptr, unsigned int eventlimit);
RcppExport SEXP webrockets_ws_receive_multiple(SEXP ws_ptrSEXP, SEXP eventlimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ws_ptr(ws_ptrSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type eventlimit(eventlimitSEXP);
    rcpp_result_gen = Rcpp::wrap(ws_receive_multiple(ws_ptr, eventlimit));
    return rcpp_result_gen;
END_RCPP
}
// ws_receive
std::string ws_receive(SEXP ws_ptr, int timeout);
RcppExport SEXP webrockets_ws_receive(SEXP ws_ptrSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ws_ptr(ws_ptrSEXP);
    Rcpp::traits::input_parameter< int >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(ws_receive(ws_ptr, timeout));
    return rcpp_result_gen;
END_RCPP
}
// ws_send
void ws_send(SEXP ws_ptr, std::string& message);
RcppExport SEXP webrockets_ws_send(SEXP ws_ptrSEXP, SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ws_ptr(ws_ptrSEXP);
    Rcpp::traits::input_parameter< std::string& >::type message(messageSEXP);
    ws_send(ws_ptr, message);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"webrockets_ws_connect", (DL_FUNC) &webrockets_ws_connect, 1},
    {"webrockets_ws_receive_one", (DL_FUNC) &webrockets_ws_receive_one, 2},
    {"webrockets_ws_receive_multiple", (DL_FUNC) &webrockets_ws_receive_multiple, 2},
    {"webrockets_ws_receive", (DL_FUNC) &webrockets_ws_receive, 2},
    {"webrockets_ws_send", (DL_FUNC) &webrockets_ws_send, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_webrockets(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
